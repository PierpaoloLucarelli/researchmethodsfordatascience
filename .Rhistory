knitr::opts_chunk$set(echo = TRUE)
#during writing you could add "eval = FALSE",  kntr will than not run this code chunk (take some time do)
setwd("~/surfdrive/Teaching/own teaching/IN4125 - Seminar Research Methodology for Data Science/2019/coursework A")
#include your code and output in the document
#include your code and output in the document
#include your code and output in the document
require(twitteR)
require(RCurl)
require(plyr)
require(stringr)
require(car)
setwd("/Users/plucarelli/Documents/RMDS");
# setup
source("credentials.R")
setup_twitter_oauth(consumer_key, consumer_secret, access_token, access_secret)
tweetsA <- searchTwitter("#trump", n=1000, lang="en", resultType="recent") #1000 recent tweets about Donald Trump, in English (I think that 1500 tweets is max)
tweetsB <- searchTwitter("#obama", n=1000, lang="en", resultType="recent") #1000 recent tweets about Hillary Clinton
tweets_C <- searchTwitter("#gandhi", n=1000, lang="en", resultType="recent") #1000 recent tweets about Bernie Sanders
tweetsA.text <- laply(tweetsA, function(t)t$getText())
tweetsB.text <- laply(tweetsB, function(t)t$getText())
tweetsC.text <- laply(tweetsC, function(t)t$getText())
pos <- scan('positive-words.txt', what = 'character', comment.char=';')
neg <- scan('negative-words.txt', what = 'character', comment.char=';')
source("sentiment3.R")
analysisA <- score.sentiment(tweetsA.text, pos, neg)
analysisB <- score.sentiment(tweetsB.text, pos, neg)
analysisC <- score.sentiment(tweetsC.text, pos, neg)
sem<-data.frame(analysisA$score, analysisB$score, analysisC$score)
semFrame <- melt(sem, measured=c(analysisA.score,analysisB.score, analysisC.score ))
names(semFrame) <- c("Candidate", "score")
leveneTest(semFrame$score, semFrame$Candidate, center=mean)
sem<-data.frame(analysisA$score, analysisB$score, analysisC$score)
semFrame <- melt(sem, measured=c(analysisA.score,analysisB.score, analysisC.score ))
names(semFrame) <- c("Candidate", "score")
leveneTest(semFrame$score, semFrame$Candidate, center=mean)
install.packages("reshape2")
require(reshape2)
sem<-data.frame(analysisA$score, analysisB$score, analysisC$score)
semFrame <- melt(sem, measured=c(analysisA.score,analysisB.score, analysisC.score ))
names(semFrame) <- c("Candidate", "score")
semFrame <- melt(sem, measured=c(analysisA.score,analysisB.score, analysisC.score ))
sem<-data.frame(analysisA$score, analysisB$score, analysisC$score)
require(twitteR)
require(RCurl)
require(plyr)
require(reshape2)
require(stringr)
require(car)
setwd("/Users/plucarelli/Documents/RMDS");
# setup
source("credentials.R")
setup_twitter_oauth(consumer_key, consumer_secret, access_token, access_secret)
tweetsA <- searchTwitter("#trump", n=1000, lang="en", resultType="recent") #1000 recent tweets about Donald Trump, in English (I think that 1500 tweets is max)
tweetsB <- searchTwitter("#obama", n=1000, lang="en", resultType="recent") #1000 recent tweets about Hillary Clinton
tweets_C <- searchTwitter("#gandhi", n=1000, lang="en", resultType="recent") #1000 recent tweets about Bernie Sanders
tweetsA.text <- laply(tweetsA, function(t)t$getText())
tweetsB.text <- laply(tweetsB, function(t)t$getText())
tweetsC.text <- laply(tweetsC, function(t)t$getText())
pos <- scan('positive-words.txt', what = 'character', comment.char=';')
neg <- scan('negative-words.txt', what = 'character', comment.char=';')
source("sentiment3.R")
analysisA <- score.sentiment(tweetsA.text, pos, neg)
analysisB <- score.sentiment(tweetsB.text, pos, neg)
analysisC <- score.sentiment(tweetsC.text, pos, neg)
sem<-data.frame(analysisA$score, analysisB$score, analysisC$score)
semFrame <- melt(sem, measured=c(analysisA.score,analysisB.score, analysisC.score ))
names(semFrame) <- c("Candidate", "score")
leveneTest(semFrame$score, semFrame$Candidate, center=mean)
require(twitteR)
require(RCurl)
require(plyr)
require(reshape2)
require(stringr)
require(car)
setwd("/Users/plucarelli/Documents/RMDS");
# setup
source("credentials.R")
setup_twitter_oauth(consumer_key, consumer_secret, access_token, access_secret)
tweetsA <- searchTwitter("#trump", n=1000, lang="en", resultType="recent") #1000 recent tweets about Donald Trump, in English (I think that 1500 tweets is max)
require(twitteR)
require(RCurl)
require(plyr)
require(reshape2)
require(stringr)
require(car)
setwd("/Users/plucarelli/Documents/RMDS");
# setup
source("credentials.R")
setup_twitter_oauth(consumer_key, consumer_secret, access_token, access_secret)
tweetsA <- searchTwitter("#trump", n=1000, lang="en", resultType="recent") #1000 recent tweets about Donald Trump, in English (I think that 1500 tweets is max)
tweetsB <- searchTwitter("#obama", n=1000, lang="en", resultType="recent") #1000 recent tweets about Hillary Clinton
tweetsC <- searchTwitter("#gandhi", n=1000, lang="en", resultType="recent") #1000 recent tweets about Bernie Sanders
tweetsA.text <- laply(tweetsA, function(t)t$getText())
tweetsB.text <- laply(tweetsB, function(t)t$getText())
tweetsC.text <- laply(tweetsC, function(t)t$getText())
pos <- scan('positive-words.txt', what = 'character', comment.char=';')
neg <- scan('negative-words.txt', what = 'character', comment.char=';')
source("sentiment3.R")
analysisA <- score.sentiment(tweetsA.text, pos, neg)
analysisB <- score.sentiment(tweetsB.text, pos, neg)
analysisC <- score.sentiment(tweetsC.text, pos, neg)
sem<-data.frame(analysisA$score, analysisB$score, analysisC$score)
semFrame <- melt(sem, measured=c(analysisA.score,analysisB.score, analysisC.score ))
names(semFrame) <- c("Candidate", "score")
leveneTest(semFrame$score, semFrame$Candidate, center=mean)
View(semFrame)
View(semFrame)
plot(semFrame$score)
plot(semFrame$score ~ semFrame$Candidate)
data
data <- read.csv('webvisit1.csv')
data
visits <- read.csv('webvisit1.csv')
plot(visits)
View(visits)
View(visits)
plot(visits$pages ~ visits$version)
plot(visits$pages ~ visits$portal)
visits0 <- visits[visits$version == 0]
visits0 <- visits[visits$version == 0,]
View(visits0)
View(visits0)
hist(visits0)
hist(visits0$pages)
visits <- read.csv('webvisit1.csv')
visits0 <- visits[visits$version == 0,]
hist(visits0$pages)
plot(cars)
plot(cars)
visits0 <- visits[visits$version == 0,]
visits0 <- visits[visits$version == 0,]
hist(visits0$pages)
visits0 <- visits[visits$version == 1,]
hist(visits0$pages)
visits0 <- visits[visits$version == 1,]
hist(visits0$pages)
visits0 <- visits[visits$portal == 0,]
hist(visits0$pages)
visits0 <- visits[visits$portal == 1,]
hist(visits0$pages)
shapiro.test(visits$pages)
shapiro.test(visits$pages)
visits$versionF <- factor(visits$version)
visits$versionF <- factor(visits$version)
visits$portal <- factor(visits$portal)
visits$versionF <- factor(visits$version)
visits$portal <- factor(visits$portal)
model0 <- lm(visits ~ 1, data=visits)
View(visits)
visits$versionF <- factor(visits$version)
visits$portalF <- factor(visits$portal)
model0 <- lm(visits ~ 1, data=visits)
View(visits)
visits$versionF <- factor(visits$version)
visits$portalF <- factor(visits$portal)
model0 <- lm(pages ~ 1, data=visits)
visits$versionF <- factor(visits$version)
visits$portalF <- factor(visits$portal)
model0 <- lm(pages ~ 1, data=visits)
model0
visits$versionF <- factor(visits$version)
visits$portalF <- factor(visits$portal)
lm(pages ~ 1, data=visits)
visits$versionF <- factor(visits$version)
visits$portalF <- factor(visits$portal)
lm(pages ~ 1, data=visits)
lm(pages ~ versionF + portalF, data=visits)
visits$versionF <- factor(visits$version)
visits$portalF <- factor(visits$portal)
model0 <- lm(pages ~ 1, data=visits)
model1 <- lm(pages ~ versionF + portalF, data=visits)
anova(model0, model1)
visits0 <- visits[visits$version == 0,]
hist(visits0$pages)
summary(visits)
visits$versionF <- factor(visits$version)
visits$portalF <- factor(visits$portal)
model0 <- lm(pages ~ 1, data=visits)
model1 <- lm(pages ~ versionF + portalF, data=visits)
ano(model0, model1)
visits$versionF <- factor(visits$version)
visits$portalF <- factor(visits$portal)
model0 <- lm(pages ~ 1, data=visits)
model1 <- lm(pages ~ versionF + portalF, data=visits)
aov(model0, model1)
visits$versionF <- factor(visits$version)
visits$portalF <- factor(visits$portal)
model0 <- lm(pages ~ 1, data=visits)
model1 <- lm(pages ~ versionF + portalF, data=visits)
anova(model0, model1)
anova(model1)
